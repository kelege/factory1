代码1：
import java.awt.Container;  
import java.awt.FlowLayout;  
import java.awt.GridLayout;  
import java.awt.event.ActionEvent;  
import java.awt.event.ActionListener;  
import java.util.Arrays;  
  
import javax.swing.*;  
  
/** 
 * This program shows a "Login" window based on Swing JFrame. 
 * When you input the correct userID and Password, you can obtain a confirmation, 
 * or else you will be alerted by a JAVA standard message window. 
 * <p> 
 * The Swing JFrame used in the same time the GridLayout for the Container and the FlowLayout for the JPanel. 
 * @author han 
 * 
 */  
public class SwingJFrameLogin {  
    /*define all the necessary member variables*/  
    String s1=null;  
    char[] s2=null;  
    JFrame frame=new JFrame();  
    Container c=frame.getContentPane();  
    /*the construct function*/  
    public SwingJFrameLogin() {  
        c.setLayout(new GridLayout(3,1,10,10));
        JPanel panel1=new JPanel(new FlowLayout(FlowLayout.CENTER));  
        JPanel panel2=new JPanel(new FlowLayout(FlowLayout.CENTER));  
        JPanel panel3=new JPanel(new FlowLayout());  
        JLabel label1=new JLabel("用户名：");  
        final JTextField jt=new JTextField(10);  
        JLabel label2=new JLabel("密码：");  
        final JPasswordField jp=new JPasswordField(6);  
        jp.setEchoChar((char) 0);//set the display words as visible.  
        final JButton jb1 = new JButton("提交");  
        final JButton jb2 = new JButton("重置");  
        panel1.add(label1);  
        panel1.add(jt);  
        panel2.add(label2);  
        panel2.add(jp);  
        panel3.add(jb1);  
        panel3.add(jb2);  
        c.add(panel1);  
        c.add(panel2);  
        c.add(panel3);        
        jb1.addActionListener(new ActionListener(){  
            @Override  
            public void actionPerformed(ActionEvent e) {  
                String s1=jt.getText();  
                char[] s2=jp.getPassword();  
                System.out.println(s1);  
                System.out.println(s2);  
                char[] pw={'u','p','s'};  
                /*System.out.println(Arrays.equals(s2,pw)); 
                System.out.println(s1.equals("han"));*/  
                if (s1.equals("han") && Arrays.equals(s2,pw)) {  
                    JOptionPane.showMessageDialog(frame,"登录成功 ！","Message",JOptionPane.INFORMATION_MESSAGE);  
                    System.exit(0);  
                }  
                else {                    
                    JOptionPane.showMessageDialog(frame,//it is a JAVA internal STD message BOX  
                            "You had input a wrong userID !!","Warning",JOptionPane.WARNING_MESSAGE);                     
                }  
                Arrays.fill(s2,'0'); //Zero out the possible password, for security.  
            }             
        });  
        jb2.addActionListener(new ActionListener(){  
            @Override  
            public void actionPerformed(ActionEvent e) {//set all the fields empty.  
                jt.setText("");  
                jp.setText("");               
            }         
        });  
        frame.pack();//automatically resize all the components to their preferred sizes.  
        frame.setVisible(true);  
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE );  
    }  
      
    public static void main(String[] args) {  
        new SwingJFrameLogin();  
    }  
}  

代码2：
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

public class PropertyChangeSupportTest {

    transient protected PropertyChangeSupport listeners = new PropertyChangeSupport( this );

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        listeners.addPropertyChangeListener(listener);
    }

    protected void firePropertyChange(String prop, Object old, Object newValue) {
        listeners.firePropertyChange(prop, old, newValue);
    }

    public void removePropertyChangeListener(PropertyChangeListener l) {
        listeners.removePropertyChangeListener(l);
    }
}

public class BeanTest extends PropertyChangeSupportTest {

    public static final String TEST = "test";

    private String name = "";

    public void setName(String name) {
        if (this.name.equals(name)) {
            System.out.println("BeanTest 的 name 属性没有变化！");
            return;
        }
        this.name = name;
        firePropertyChange(TEST, null, name);
    }

    public String getName() {
        return this.name;
    }
}

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class BeanTestListener implements PropertyChangeListener{

    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getPropertyName().equals(BeanTest.TEST))
            System.out.println("BeanTest 的 name 属性变化！");
        
    }
    public static void main(String[] args){
        BeanTest test = new BeanTest();
        test.addPropertyChangeListener(new BeanTestListener());
        test.setName("fuxueliang");
        test.setName("fuxueliang");
        System.out.println(test.getName());
    }

}
